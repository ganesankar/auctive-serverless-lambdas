
service: auctiveserverless

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  profile: serverlessAccount
  environment:
      tableName: ${self:custom.tableName}
      tokenSecret: ${self:custom.tokenSecret}
      region: ${self:provider.region}
      cloudSearchDocEndpoint: ${self:custom.cloudSearchDocEndpoint}
      cloudSearchEndpoint: ${self:custom.cloudSearchEndpoint}
      dynamoStreamArn: ${self:custom.dynamoStreamArn}
      imageUploadBucket: ${self:custom.imageUploadBucket}
      usersBucket: ${self:custom.usersBucket}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
            - ses:*
            - cloudsearch:*
            - sns:*
          Resource: '*'
  apiGateway:
    apiKeys:
      - adminApiKey

plugins:
    - serverless-webpack
    - serverless-offline

package:
    individually: true

custom:
    tableName: x
    tokenSecret: x
    cloudSearchDocEndpoint: x
    cloudSearchEndpoint: x
    dynamoStreamArn: x
    imageUploadBucket: x

    webpack:
      webpackConfig: ./webpack.config.js

functions:
  createUser:
    handler: lambdas/endpoints/users/createUser.handler
    events:
      - http:
            path: users/
            method: POST
            cors: true
  login:
    handler: lambdas/endpoints/users/userLogin.handler
    events:
      - http:
            path: users/login
            method: POST
            cors: true

  change-password:
    handler: lambdas/endpoints/users/changePassword.handler
    events:
      - http:
            path: users/change-password
            method: POST
            cors: true

  addPhoneNumber:
        handler: lambdas/endpoints/users/updateUserPhoneNumber.handler
        events:
            - http:
                  path: users/update-phone
                  method: PUT
                  cors: true
  findUsers:
    handler: lambdas/endpoints/users/findUsers.handler
    events:
        - http:
              path: users
              method: GET
              cors: true
  enableNotifications:
    handler: lambdas/endpoints/users/enableNotifications.handler
    events:
        - http:
              path: users/enable-notifications
              method: PUT
              cors: true
  getUser:
    handler: lambdas/endpoints/users/getUser.handler
    events:
        - http:
              path: users/user
              method: GET
              cors: true
        - http:
              path: users/{email}
              method: GET
              cors: true

  updateUserProfilePic:
    handler: lambdas/endpoints/users/updateProfilePic.handler
    events:
        - http:
              path: user/profile-pic
              method: PUT
              cors: true
  getUserAuctionSubscriptions:
    handler: lambdas/endpoints/users/getAuctionSubscriptions.handler
    events:
        - http:
              path: user/auctions
              method: GET
              cors: true

  getUserNotifications:
    handler: lambdas/endpoints/notifications/getNotifications.handler
    events:
        - http:
              path: user/notifications
              method: GET
              cors: true

  deleteNotifications:
    handler: lambdas/endpoints/notifications/deleteNotifications.handler
    events:
        - http:
              path: user/notifications/
              method: DELETE
              cors: true
              
  deleteNotificationById:
    handler: lambdas/endpoints/notifications/deleteNotificationById.handler
    events:
        - http:
              path: user/notifications/{id}
              method: DELETE
              cors: true
              
  getUserConversations:
    handler: lambdas/endpoints/conversations/getConversations.handler
    events:
        - http:
              path: conversations/
              method: GET
              cors: true

  createConversation:
    handler: lambdas/endpoints/conversations/createConversation.handler
    events:
        - http:
              path: conversations/create
              method: POST
              cors: true

  searchAuctions:
    handler: lambdas/endpoints/auctions/getAuctions.handler
    events:
      - http:
            path: auctions/
            method: GET
            cors: true
  getInterestedUsers:
    handler: lambdas/endpoints/auctions/getUsersInterested.handler
    events:
      - http:
            path: auctions/{id}/interested
            method: GET
            cors: true
            
  getAuctionsFromList:
    handler: lambdas/endpoints/auctions/getAuctionsFromList.handler
    events:
      - http:
            path: auctions/list
            method: POST
            cors: true
  subscribeToAuction:
    handler: lambdas/endpoints/auctions/subscribeToAuction.handler
    events:
      - http:
            path: auctions/subscribe
            method: POST
            cors: true
            
  createCategory:
    handler: lambdas/endpoints/categories/createCategory.handler
    events:
      - http:
            path: categories/
            method: POST
            cors: true

  getCategories:
    handler: lambdas/endpoints/categories/getCategories.handler
    events:
      - http:
            path: categories/
            method: GET
            cors: true

  deleteCategoryById:
    handler: lambdas/endpoints/categories/deleteCategoryById.handler
    events:
      - http:
            path: categories/{id}
            method: DELETE
            cors: true
            
  getScheduledActions:
    handler: lambdas/endpoints/scheduled-actions/getScheduledActions.handler
    events:
      - http:
            path: scheduled-actions/
            method: GET
            cors: true
            private: true

  sendSMS:
    handler: lambdas/endpoints/sms/sendSMS.handler
    events:
      - http:
            path: send-sms/
            method: POST
            cors: true
            private: true 
  
  imageUpload:
        handler: lambdas/endpoints/auctions/imageUpload.handler
        events:
            - http:
                  path: image-upload/
                  method: POST
                  cors: true
  imagesUpload:
        handler: lambdas/endpoints/auctions/imagesUpload.handler
        events:
            - http:
                  path: images-upload/
                  method: POST
                  cors: true
  getOwnerAuctions:
    handler: lambdas/endpoints/auctions/getOwnerAuctions.handler
    events:
      - http:
            path: auctions/getAuctions/{id}
            method: GET
            cors: true
                              
  createNotification:
        handler: lambdas/endpoints/notifications/createNotification.handler
        events:
            - http:
                  path: notifications/create
                  method: POST
                  cors: true
                              
  getPendingVerifications:
        handler: lambdas/endpoints/verifications/getPendingVerifications.handler
        events:
            - http:
                  path: verifications
                  method: GET
                  cors: true
                              
  updateVerificationRequest:
        handler: lambdas/endpoints/verifications/updateVerificationRequest.handler
        events:
            - http:
                  path: verifications/accept/{id}
                  method: PUT
                  cors: true

  stream2cloudsearch:
    handler: lambdas/streams/stream2cloudsearch.handler
    events:
      - stream: ${self:custom.dynamoStreamArn}

resources:
    Resources:
        ImageUploadBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.imageUploadBucket}
                AccessControl: PublicRead
        UsersBucket:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.usersBucket}
                AccessControl: PublicRead